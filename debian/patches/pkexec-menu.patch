Author: David Mohammed <fossfreedom@ubuntu.com>
Last-Update: 2019-04-30
Description: [PATCH] Launch pkexec based menu apps via spawn_async #1433
Origin: https://github.com/solus-project/budgie-desktop/pull/1807

---
 src/applets/budgie-menu/BudgieMenuWindow.vala | 40 +++++++++++++++----
 1 file changed, 32 insertions(+), 8 deletions(-)

diff --git a/src/applets/budgie-menu/BudgieMenuWindow.vala b/src/applets/budgie-menu/BudgieMenuWindow.vala
index dee0c225..dd9c031b 100644
--- a/src/applets/budgie-menu/BudgieMenuWindow.vala
+++ b/src/applets/budgie-menu/BudgieMenuWindow.vala
@@ -1,8 +1,8 @@
 /*
  * This file is part of budgie-desktop
- * 
+ *
  * Copyright Â© 2015-2019 Budgie Desktop Developers
- * 
+ *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; either version 2 of the License, or
@@ -39,7 +39,7 @@ public class BudgieMenuWindow : Budgie.Popover
     /* Mapped id -> button */
     protected HashTable<string,MenuButton?> menu_buttons = null;
 
-    // The current group 
+    // The current group
     protected GMenu.TreeDirectory? group = null;
     protected bool compact_mode;
     protected bool headers_visible;
@@ -77,7 +77,7 @@ public class BudgieMenuWindow : Budgie.Popover
         }
         SignalHandler.disconnect_by_func(tree, (void*)refresh_tree, this);
         this.tree = null;
-        Idle.add(()=> { 
+        Idle.add(()=> {
             load_menus(null);
             content.invalidate_headers();
             content.invalidate_filter();
@@ -111,13 +111,13 @@ public class BudgieMenuWindow : Budgie.Popover
 
     /**
      * Load "menus" (.desktop's) recursively (ripped from our RunDialog)
-     * 
+     *
      * @param tree_root Initialised GMenu.TreeDirectory, or null
      */
     private void load_menus(GMenu.TreeDirectory? tree_root = null)
     {
         GMenu.TreeDirectory root;
-    
+
         // Load the tree for the first time
         if (tree == null) {
             tree = new GMenu.Tree(APPS_ID, GMenu.TreeFlags.SORT_DISPLAY_NAME);
@@ -411,7 +411,7 @@ public class BudgieMenuWindow : Budgie.Popover
             child = after.get_child() as MenuButton;
             next = child.parent_menu.get_name();
         }
-        
+
         // Only add one if we need one!
         if (before == null || after == null || prev != next) {
             var label = new Gtk.Label(Markup.printf_escaped("<big>%s</big>", prev));
@@ -567,7 +567,31 @@ public class BudgieMenuWindow : Budgie.Popover
         // Do it on the idle thread to make sure we don't have focus wars
         Idle.add(()=> {
             try {
-                info.launch(null,null);
+                /*
+                 appinfo.launch has difficulty running pkexec
+                 based apps so lets spawn an async process instead
+                 */
+                var commandline =  info.get_commandline();
+                string[] spawn_args = {};
+                const string checkstr = "pkexec";
+                if (commandline.contains(checkstr)) {
+                    spawn_args = commandline.split(" ");
+                }
+                if (spawn_args.length >= 2 && spawn_args[0] == checkstr) {
+                    string[] spawn_env = Environ.get();
+                    Pid child_pid;
+                    Process.spawn_async("/",
+                        spawn_args,
+                        spawn_env,
+                        SpawnFlags.SEARCH_PATH | SpawnFlags.DO_NOT_REAP_CHILD,
+                        null, out child_pid);
+                    ChildWatch.add(child_pid, (pid, status) => {
+                        Process.close_pid(pid);
+                    });
+                }
+                else {
+                    info.launch(null, null);
+                }
             } catch (Error e) {
                 stdout.printf("Error launching application: %s\n", e.message);
             }
-- 
2.17.1

